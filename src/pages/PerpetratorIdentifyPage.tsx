import "../styles/login/loginStyles.scss";
import "../styles/common/commonStyles.scss";
import { useLocation, useNavigate } from "react-router-dom";
import {
  customToastMsg,
  handleError,
  popUploader,
} from "../util/commonFunctions";
import { useEffect, useState } from "react";
import {
  Button,
  Card,
  Carousel,
  Col,
  message,
  Radio,
  Row,
  Tabs,
  TabsProps,
  Tag,
} from "antd";
import NavBar from "../components/common/NavBar";
import PredictionImg from "../assets/images/predictImage.png";
import Prediction from "../assets/images/processImg04.png";
import {
  DNASequencePredictionDataObj,
  GeneratedPerpetratorImagesObj,
  PerpetratorCardDetailsObj,
} from "../util/interfaces/uiNecessaryInterface";
import RealPerpetratorViewModal from "../components/common/modal/RealPerpetratorViewModal";
import { PerpetratorsCard } from "../components/common/cards/PerpetratorsCard";
import AOS from "aos";
import "aos/dist/aos.css";
import { useDispatch } from "react-redux";
import { predictImagesOfSuspicion } from "../service/imagePredictionService";
import defaultImage from "../assets/images/userImg-2.jpg";
import defaultImage2 from "../assets/images/userImg.png";
import { findMatchingPerpetrators } from "../service/perpetratorService";
import { Cookies } from "typescript-cookie";
import axios from "axios";
import * as constants from "../util/constants";

const PerpetratorIdentifyPage = () => {
  const history = useNavigate();
  const location = useLocation();
  const dispatch = useDispatch();

  const [aiPredictedDetails, setAiPredictedDetails] =
    useState<DNASequencePredictionDataObj>();
  const [uploadedDNASequence, setUploadedDNASequence] = useState<string>();
  const [isHavePredictedImage, setIsHavePredictedImage] =
    useState<boolean>(false);
  const [predictedImages, setPredictedImages] =
    useState<GeneratedPerpetratorImagesObj>();
  const [isGetRealPerpetrators, setIsGetRealPerpetrators] =
    useState<boolean>(false);

  const [perpetratorList, setPerpetratorList] = useState<
    PerpetratorCardDetailsObj[]
  >([]);

  useEffect(() => {
    const { state } = location;
    if (state && state.aiPredictedDataObj) {
      const { aiPredictedDataObj } = state;
      console.log(aiPredictedDataObj, "-------aiPredictedDataObj-------");
      setAiPredictedDetails(aiPredictedDataObj);
    }
    if (state && state.DNASequence) {
      const { DNASequence } = state;
      console.log(DNASequence, "-------DNASequence uploded-------");
      setUploadedDNASequence(DNASequence);
    }
  }, [location]);

  useEffect(() => {
    AOS.init({
      duration: 1200,
      once: true,
    });
  }, []);

  const handleGetImagePredictionToDataObject = () => {
    let isValidate: boolean = false;
    aiPredictedDetails === undefined
      ? customToastMsg(
          "First upload your dna sequence and get perpetrator basic details.",
          2
        )
      : (isValidate = true);

    // setIsHavePredictedImage(true);
    // setPredictedImages({
    //   front:
    //     "https://oaidalleapiprodscus.blob.core.windows.net/private/org-QhTHbyx95oCV4C2bAsbAB236/user-enXfHJrYc9V4lGbrgX6TWC2t/img-OIZPpoBQQNcrRfaj3BwAIUOz.png?st=2025-03-24T02%3A16%3A09Z&se=2025-03-24T04%3A16%3A09Z&sp=r&sv=2024-08-04&sr=b&rscd=inline&rsct=image/png&skoid=d505667d-d6c1-4a0a-bac7-5c84a87759f8&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-03-23T05%3A17%3A25Z&ske=2025-03-24T05%3A17%3A25Z&sks=b&skv=2024-08-04&sig=vaEwshbS0AtqPeOngE5AQctw2IFjnM%2Bo15mkeP6iq88%3D",
    //   left: "https://oaidalleapiprodscus.blob.core.windows.net/private/org-QhTHbyx95oCV4C2bAsbAB236/user-enXfHJrYc9V4lGbrgX6TWC2t/img-ws2RCPp4FpD27aueqOnPywPo.png?st=2025-03-24T02%3A16%3A12Z&se=2025-03-24T04%3A16%3A12Z&sp=r&sv=2024-08-04&sr=b&rscd=inline&rsct=image/png&skoid=d505667d-d6c1-4a0a-bac7-5c84a87759f8&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-03-23T16%3A56%3A24Z&ske=2025-03-24T16%3A56%3A24Z&sks=b&skv=2024-08-04&sig=AFYqO0rxBTtgOw%2BICRlEJX6A7BLrjRLsQMqk629lm0g%3D",
    //   right:
    //     "https://oaidalleapiprodscus.blob.core.windows.net/private/org-QhTHbyx95oCV4C2bAsbAB236/user-enXfHJrYc9V4lGbrgX6TWC2t/img-aNDJGJz6gkeNdb4lse2eyKN8.png?st=2025-03-24T02%3A16%3A14Z&se=2025-03-24T04%3A16%3A14Z&sp=r&sv=2024-08-04&sr=b&rscd=inline&rsct=image/png&skoid=d505667d-d6c1-4a0a-bac7-5c84a87759f8&sktid=a48cca56-e6da-484e-a814-9c849652bcb3&skt=2025-03-23T15%3A46%3A41Z&ske=2025-03-24T15%3A46%3A41Z&sks=b&skv=2024-08-04&sig=T5AqqnF3AiPrSRL6RD0OjZyLCP7HBGKuM7UBO58v4KY%3D",
    // });
    if (isValidate) {
      popUploader(dispatch, true);

      predictImagesOfSuspicion(aiPredictedDetails)
        .then((response: any) => {
          popUploader(dispatch, false);
          setPredictedImages(response);
          customToastMsg(
            "Suspicion images generated by crime genix successfully",
            1
          );
          setIsHavePredictedImage(true);
        })
        .catch((error) => {
          popUploader(dispatch, false);
          console.log(error);
          handleError(error);
        });
    }
  };

  const getTheRealPerpetrators = async () => {
    popUploader(dispatch, true);

    const payload = {
      dna_sequence: uploadedDNASequence,
    };

    let access_token = Cookies.get(constants.ACCESS_TOKEN);
    await axios
      .post(`http://localhost:5000/find_match`, payload, {
        headers: {
          Authorization: `Bearer ${access_token}`,
        },
      })
      .then((response) => {
        let temp: PerpetratorCardDetailsObj[] = [];
        console.log(response?.data);

        response?.data.map((perpetrator: any) => {
          temp.push({
            id: perpetrator?.id,
            name: perpetrator?.name,
            age: perpetrator?.age,
            gender: perpetrator?.gender,
            nic: perpetrator?.nic,
            files: perpetrator?.files,
          });
        });
        setPerpetratorList(temp);
        setIsGetRealPerpetrators(true);
        popUploader(dispatch, false);
      })
      .catch((err) => {
        popUploader(dispatch, false);
        handleError(err);
      });
  };

  const items: TabsProps["items"] = [
    {
      key: "1",
      label: "Left View",
      children: (
        <img
          src={predictedImages?.left}
          style={{
            width: "auto",
            maxWidth: "100vw",
            height: "420px",
            objectFit: "cover",
          }}
        />
      ),
    },
    {
      key: "2",
      label: "Front View",
      children: (
        <img
          src={predictedImages?.front}
          style={{
            width: "auto",
            maxWidth: "100vw",
            height: "420px",
            objectFit: "cover",
          }}
        />
      ),
    },
    {
      key: "3",
      label: "Right View",
      children: (
        <img
          src={predictedImages?.right}
          style={{
            width: "auto",
            maxWidth: "100vw",
            height: "420px",
            objectFit: "cover",
          }}
        />
      ),
    },
  ];

  return (
    <>
      {" "}
      <NavBar pageName="bgNavBar" />
      <div
        className="position-relative"
        style={{
          backgroundColor: "white",
          height: "auto",
        }}
      >
        <div className="w-100 d-flex justify-content-center">
          <div className="mainTextDiv w-90">
            <Row className="d-flex align-items-end justify-content-center">
              <Col xs={24} sm={24} md={24} lg={18} xl={19} xxl={20}>
                <h1
                  data-aos="fade-up"
                  className="font-size-1-2 mainText  font-weight-semi-bold   text-center text-lg-start font-family-2 mt-5 mt-lg-0 w-100"
                >
                  Unmasking The Truth
                </h1>
                <p
                  data-aos="fade-up"
                  className="font-size-5 subText font-weight-light align-self-end  text-center text-lg-start"
                >
                  Harnessing AI to identify criminals faster, smarter, and with
                  unmatched accuracy.
                </p>
              </Col>
              <Col xs={24} sm={24} md={8} lg={6} xl={5} xxl={4}>
                {!isHavePredictedImage && (
                  <Button
                    data-aos="fade-up"
                    className="secondary-button px-4 py-3  font-size-4 w-100"
                    size="large"
                    type="primary"
                    onClick={handleGetImagePredictionToDataObject}
                  >
                    Get Image Prediction
                  </Button>
                )}
              </Col>
            </Row>

            <Row className="my-5">
              <Col
                xs={24}
                sm={24}
                md={isHavePredictedImage ? 12 : 20}
                lg={isHavePredictedImage ? 14 : 20}
                xl={isHavePredictedImage ? 15 : 20}
                xxl={isHavePredictedImage ? 15 : 20}
                className="d-flex flex-column align-items-center align-items-md-start"
              >
                <h5
                  data-aos="fade-up"
                  data-aos-delay="300"
                  className=" font-size-3 font-weight-semi-bold mb-4"
                >
                  Crime Genix Predicted Suspect Details
                </h5>

                <Card
                  data-aos="fade-up"
                  data-aos-delay="300"
                  hoverable
                  bordered={false}
                  className="w-100 rounded-4"
                  style={{ backgroundColor: "#00469b27" }}
                >
                  {" "}
                  <Row className="w-100">
                    {Object.entries(aiPredictedDetails || {})
                      .reduce(
                        (acc, curr, index) => {
                          acc[index % 2 === 0 ? 0 : 1].push(curr);
                          return acc;
                        },
                        [[], []] // Two sub-arrays: one for the left column, one for the right
                      )
                      .map((columnData, columnIndex) => (
                        <Col
                          xs={24}
                          sm={24}
                          md={24}
                          lg={24}
                          xl={12}
                          key={columnIndex}
                        >
                          {columnData.map(([key, value]) => (
                            <Row className="my-2" key={key}>
                              <Col
                                xs={12}
                                sm={10}
                                md={14}
                                lg={12}
                                xl={13}
                                xxl={13}
                              >
                                <h5 className="font-size-4 font-weight-normal">
                                  {key.replace(/_/g, " ")}
                                </h5>
                              </Col>
                              <Col
                                xs={1}
                                sm={1}
                                md={1}
                                lg={1}
                                xl={1}
                                xxl={1}
                                className="d-flex justify-content-center"
                              >
                                <h5 className="font-size-4 font-weight-normal text-center">
                                  :
                                </h5>
                              </Col>
                              <Col
                                xs={11}
                                sm={12}
                                md={9}
                                lg={11}
                                xl={10}
                                xxl={10}
                              >
                                {key === "ASPD_Psychopathy_Level" ||
                                key === "Violent_Behavior_Level" ? (
                                  <Tag
                                    className="font-size-4 font-weight-normal py-1 px-2 ms-2"
                                    color={
                                      value === "Low"
                                        ? "green"
                                        : value === "Medium"
                                        ? "warning"
                                        : value === "High"
                                        ? "red"
                                        : "none"
                                    }
                                  >
                                    {value ? value : "none"}
                                  </Tag>
                                ) : key === "Alcohol_Consumption" ? (
                                  <Tag
                                    className="font-size-4 font-weight-normal py-1 px-2 ms-2"
                                    color={
                                      value === "Occasional"
                                        ? "green"
                                        : value === "Heavy"
                                        ? "orange"
                                        : value === "Frequent"
                                        ? "red"
                                        : "none"
                                    }
                                  >
                                    {value ? value : "none"}
                                  </Tag>
                                ) : key === "Depression_Level" ? (
                                  <Tag
                                    className="font-size-4 font-weight-normal py-1 px-2 ms-2"
                                    color={
                                      value === "Mild"
                                        ? "green"
                                        : value === "Moderate"
                                        ? "warning"
                                        : value === "Severe"
                                        ? "red"
                                        : "none"
                                    }
                                  >
                                    {value ? value : "none"}
                                  </Tag>
                                ) : key === "Gender" ? (
                                  <Tag
                                    className="font-size-4 font-weight-normal py-1 px-2 ms-2"
                                    color="processing"
                                  >
                                    {value ? value : "none"}
                                  </Tag>
                                ) : (
                                  <h5 className="font-size-4 font-weight-normal ms-2">
                                    {value}
                                  </h5>
                                )}
                              </Col>
                            </Row>
                          ))}
                        </Col>
                      ))}
                  </Row>
                </Card>
              </Col>
              <Col
                xs={24}
                sm={24}
                md={isHavePredictedImage ? 12 : 0}
                lg={isHavePredictedImage ? 10 : 0}
                xl={isHavePredictedImage ? 9 : 0}
                xxl={isHavePredictedImage ? 9 : 0}
                className=" ps-0 ps-md-5 d-flex flex-column align-items-center mt-5 mt-md-0"
              >
                {isHavePredictedImage && (
                  <h5 className=" font-size-3 font-weight-semi-bold mb-4">
                    Crime Genix Predicted Suspect Images
                  </h5>
                )}

                {isHavePredictedImage && (
                  <Card
                    hoverable
                    bordered={false}
                    className="w-100 rounded-4  d-flex justify-content-center"
                    style={{ backgroundColor: "#00469b27" }}
                  >
                    <Tabs defaultActiveKey="1" items={items} />
                    {/* <img
                      src={defaultImage}
                      style={{
                        width: "auto",
                        maxWidth: "100vw",
                        height: "420px",
                        objectFit: "cover",
                      }}
                    /> */}
                  </Card>
                )}
              </Col>
            </Row>
            {isHavePredictedImage && !isGetRealPerpetrators && (
              <Row className="my-5 ">
                <Button
                  className="px-4 py-3  font-size-4 w-50"
                  size="large"
                  type="default"
                  onClick={() => {
                    getTheRealPerpetrators();
                  }}
                >
                  Reveal the Truth
                </Button>
              </Row>
            )}
            {isGetRealPerpetrators && (
              <div>
                <h5
                  data-aos="fade-up"
                  data-aos-delay="300"
                  className=" font-size-3 font-weight-semi-bold mb-4"
                >
                  Matching Perpetrators
                </h5>
                <Row className="mb-4 d-flex justify-content-start">
                  {perpetratorList.length > 0 ? (
                    perpetratorList?.map((perpetrator) => {
                      return (
                        <Col
                          data-aos="fade-up"
                          data-aos-delay="300"
                          xs={20}
                          sm={10}
                          md={8}
                          lg={6}
                          xl={5}
                          xxl={4}
                          className="mx-3 my-3"
                        >
                          <PerpetratorsCard
                            perpetratorDetails={perpetrator}
                            loadAll={() => {}}
                          />
                        </Col>
                      );
                    })
                  ) : (
                    <div className="d-flex flex-column align-items-center">
                      <h5 className=" font-size-4 font-weight-normal mb-4">
                        No matching perpetrators found based on crime genix
                        predictions
                      </h5>
                      <Button
                        className="px-4 py-3  font-size-4 w-50 mb-5"
                        size="large"
                        type="default"
                        onClick={() => {
                          history("/");
                        }}
                      >
                        Back to home
                      </Button>
                    </div>
                  )}
                </Row>
              </div>
            )}
          </div>
        </div>
      </div>
    </>
  );
};
export default PerpetratorIdentifyPage;
